type: edu
files:
- name: src/battleship/Main.java
  visible: true
  text: |
    package battleship;

    public class Main {

        public static void main(String[] args) {
            // Write your code here
        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;


    public class Tests extends StageTest<String> {

        @DynamicTestingMethod
        CheckResult exampleTest() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("F3 F7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("A1 D1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 D1");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("J7 J10").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("J10 J8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J10 J8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("B9 D8").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("B9 D9").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B9 D9");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("E6 D6").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("I2 J2").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "I2 J2");

            if (!output.contains("starts")) {
                return CheckResult.wrong("After entering the coordinates of all ships you should print:\n" +
                    "\"The game starts!\"");
            }

            output = validateShots(main, new String[][]{
                {"A1", "x"}, {"A2", "m"}, {"B1", "x"}, {"C1", "x"}, {"D1", "x"}, {"E4", "m"},
                {"B9", "x"}, {"C9", "x"}, {"D9", "x"}, {"E9", "m"}, {"F3", "x"}, {"F4", "x"},
                {"F5", "x"}, {"F6", "x"}, {"F7", "x"}, {"F10", "m"}, {"G8", "m"}, {"G5", "m"},
                {"H2", "m"}, {"I2", "x"}, {"J2", "x"}, {"J6", "m"}, {"J8", "x"}, {"J9", "x"}, {"J10", "x"}
            });

            if (!output.toLowerCase().contains("you sank the last ship")) {
                return CheckResult.wrong("At the end of the game, your program should print a congratulatory message to the winner:" +
                    " You sank the last ship. You won. Congratulations!");
            }

            if (!main.isFinished()) {
                return CheckResult.wrong("The game didn't stop after all ships were sank.");
            }

            return CheckResult.correct();
        }


        @DynamicTestingMethod
        CheckResult test() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("J3 J7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J3 J7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("C8 B8");
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Incorrect length of the ship)");
            }

            output = main.execute("C8 F8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "C8 F8");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("A1 C2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("A1 C1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 C1");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("H1 H3").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H1 H3");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("G2 E2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("B5 C5").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B5 C5");

            if (!output.contains("starts")) {
                return CheckResult.wrong("Your program didn't print a massage about game start");
            }

            String[] temp = output.split("starts");
            if (temp.length < 2) {
                return CheckResult.wrong("After printing \"The game starts!\" you should print an empty battle field!");
            }
            output = temp[1];

            if (!matrixIsEmpty(getFieldMatrix(output))) {
                return CheckResult.wrong("After the game starts you should print an empty battle field!");
            }

            output = validateShots(main, new String[][]{
                {"A1", "x"}, {"A2", "m"}, {"B1", "x"}, {"C1", "x"}, {"D1", "m"}, {"F5", "m"},
                {"B5", "x"}, {"B4", "m"}, {"C5", "x"}, {"H8", "m"}, {"F8", "x"}, {"G8", "m"},
                {"E8", "x"}, {"D8", "x"}, {"C8", "x"}, {"D8", "x"}, {"I9", "m"}, {"H1", "x"},
                {"I1", "m"}, {"H2", "x"}, {"H3", "x"}, {"E2", "m"}, {"I8", "m"}, {"J7", "x"},
                {"J8", "m"}, {"J6", "x"}, {"J5", "x"}, {"J4", "x"}, {"J3", "x"},
            });

            if (!output.toLowerCase().contains("you sank the last ship")) {
                return CheckResult.wrong("At the end of the game, your program should print a congratulatory message to the winner:" +
                    " You sank the last ship. You won. Congratulations!");
            }

            if (!main.isFinished()) {
                return CheckResult.wrong("The game didn't stop after all ships were sank.");
            }

            return CheckResult.correct();
        }


        String validateShots(TestedProgram main, String[][] commands) {

            String output = null;

            for (String[] item : commands) {
                output = main.execute(item[0]);
                if (item[1].equals("x")) {
                    if (!checkShot(getFieldMatrix(output), item[0])) {
                        throw new WrongAnswer("Expected hit in " + item[0]);
                    }
                }
                if (item[1].equals("m")) {
                    if (!checkMissing(getFieldMatrix(output), item[0])) {
                        throw new WrongAnswer("Expected miss in " + item[0]);
                    }
                }
            }

            return output;
        }


        void findShipByCoordinates(String[][] matrix, String coordinates) {
            int[] coordinatesInt = parseCoordinates(coordinates);

            if (coordinatesInt[0] > coordinatesInt[2]) {
                int swap = coordinatesInt[0];
                coordinatesInt[0] = coordinatesInt[2];
                coordinatesInt[2] = swap;
            } else if (coordinatesInt[1] > coordinatesInt[3]) {
                int swap = coordinatesInt[1];
                coordinatesInt[1] = coordinatesInt[3];
                coordinatesInt[3] = swap;
            }

            if (coordinatesInt[0] == coordinatesInt[2]) {
                int cord = coordinatesInt[0];
                for (int i = coordinatesInt[1]; i <= coordinatesInt[3]; i++) {
                    if (!matrix[cord][i].toLowerCase().equals("x") && !matrix[cord][i].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the coordinates \"" + coordinates + "\"");
                    }
                }
            } else {
                int cord = coordinatesInt[1];
                for (int i = coordinatesInt[0]; i <= coordinatesInt[2]; i++) {
                    if (!matrix[i][cord].toLowerCase().equals("x") && !matrix[i][cord].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the \"" + coordinates + "\"");
                    }
                }
            }
        }

        boolean matrixIsEmpty(String[][] matrix) {
            for (String[] strings : matrix) {
                for (int j = 0; j < matrix.length; j++) {
                    if (!strings[j].trim().equals("~")) {
                        return false;
                    }
                }
            }
            return true;
        }

        boolean checkShot(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            return matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("x");
        }

        boolean checkMissing(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            return matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("m");
        }

        int[] parseCoordinates(String coordinatesString) {
            String[] splittedCoords = coordinatesString.split(" ");
            int[] parsedCoordinates = new int[4];

            parsedCoordinates[0] = charToInt(splittedCoords[0].substring(0, 1));
            parsedCoordinates[1] = Integer.parseInt(splittedCoords[0].substring(1)) - 1;
            parsedCoordinates[2] = charToInt(splittedCoords[1].substring(0, 1));
            parsedCoordinates[3] = Integer.parseInt(splittedCoords[1].substring(1)) - 1;

            return parsedCoordinates;
        }

        int charToInt(String charCoordinate) {
            charCoordinate = charCoordinate.toLowerCase();
            char character = charCoordinate.charAt(0);
            return (int) character - (int) 'a';
        }

        String[][] getFieldMatrix(String output) {

            WrongAnswer cantParseException = new WrongAnswer("Can't parse the game field\n" +
                "Make sure you print it like in examples!");

            String[] splittedOutput = output.split("\n");
            String[][] matrix = new String[10][10];

            try {
                int index = 0;
                while (!(splittedOutput[index].contains("1") &&
                    splittedOutput[index].contains("2") &&
                    splittedOutput[index].contains("10"))) {
                    index++;
                    if (index > 1000) {
                        throw cantParseException;
                    }
                }
                index++;

                for (int i = 0; i < 10; i++) {
                    String temp = splittedOutput[index].substring(2).trim();
                    String[] splittedLine = temp.trim().split(" ");
                    if (splittedLine.length != 10) {
                        throw cantParseException;
                    }
                    matrix[i] = splittedLine;
                    index++;
                }
            } catch (IndexOutOfBoundsException ignored) {
                throw cantParseException;
            }

            return matrix;
        }

        boolean isGameFieldPrinted(String output) {
            return output.contains("1") && output.contains("2") && output.contains("10");
        }
    }
  learner_created: false
- name: src/battleship/ShipTypes.java
  visible: true
  text: |
    package battleship;

    enum ShipTypes {
        AIRCRAFT_CARRIER(1, 5, "Aircraft Carrier"),
        BATTLESHIP(2, 4, "Battleship"),
        SUBMARINE(3, 3, "Submarine"),
        CRUISER(4, 3, "Cruiser"),
        DESTROYER(5, 2, "Destroyer ");

        int type;
        int cells;
        String slug;

        ShipTypes(int type, int cells, String slug) {
            this.type = type;
            this.cells = cells;
            this.slug = slug;
        }

        public int getType() {
            return type;
        }

        public int getCells() {
            return cells;
        }

        public String getSlug() {
            return slug;
        }

        public static ShipTypes findByType(int type) {
            for (ShipTypes s : ShipTypes.values()) {
                if (s.type == type) {
                    return s;
                }
            }
            return null;
        }

    }
  learner_created: true
- name: src/battleship/BattleField.java
  visible: true
  text: |
    package battleship;

    import java.util.ArrayList;
    import java.util.Scanner;

    public class BattleField {
        private ArrayList<Ship> playerShips = new ArrayList<>();
        private char[][] playField;
        private char[][] enemyField;
        private ArrayList<ShipTypes> shipsAdded;
        private final Scanner scanner;

        public BattleField(final Scanner scanner) {
            this.playField = fillPlayField();
            this.enemyField = fillPlayField();
            this.shipsAdded = new ArrayList<>();
            this.scanner = scanner;
        }

        public boolean addShip(Ship ship) {
    //  1 Validate Input

            if (shipsAdded.size() > 0) {
                int startRow = (ship.getFirstCoordinate()[0] - 1 < 0) ? ship.getFirstCoordinate()[0] : ship.getFirstCoordinate()[0] - 1;
                int startCol = (ship.getFirstCoordinate()[1] - 1 < 0) ? ship.getFirstCoordinate()[1] : ship.getFirstCoordinate()[1] - 1;
                int endRow = (ship.getSecondCoordinate()[0] + 1 > 9) ? ship.getSecondCoordinate()[0] : ship.getSecondCoordinate()[0] + 1;
                int endCol = (ship.getSecondCoordinate()[1] + 1 > 9) ? ship.getSecondCoordinate()[1] : ship.getSecondCoordinate()[1] + 1;

                for (int i = startRow; i <= endRow; i++) {
                    for (int j = startCol; j <= endCol; j++) {
                        if (playField[i][j] == 'O') {
                            return false;
                        }
                    }
                }
            }

            if (ship.isHorizontal()) {
                for (int i = ship.getFirstCoordinate()[1]; i <= ship.getSecondCoordinate()[1]; i++) {
                    this.playField[ship.getSecondCoordinate()[0]][i] = 'O';
                }
            } else {
                for (int i = ship.getFirstCoordinate()[0]; i <= ship.getSecondCoordinate()[0]; i++) {
                    this.playField[i][ship.getFirstCoordinate()[1]] = 'O';
                }
            }
            this.playerShips.add(ship);
            this.shipsAdded.add(ship.getType());
            return true;
        }

        public boolean defineShips() {
            int shipCounter = 1;
            boolean error = false;
            this.printPlayField();

            while (shipCounter <= 5) {
                if (!error) {
                    String msg = "";
                    switch (shipCounter) {
                        case 1:
                            msg = "Enter the coordinates of the Aircraft Carrier (5 cells):\n";
                            break;
                        case 2:
                            msg = "Enter the coordinates of the Battleship (4 cells):\n";
                            break;
                        case 3:
                            msg = "Enter the coordinates of the Submarine (3 cells):\n";
                            break;
                        case 4:
                            msg = "Enter the coordinates of the Cruiser (3 cells):\n";
                            break;
                        case 5:
                            msg = "Enter the coordinates of the Destroyer (2 cells):\n";
                            break;
                    }

                    System.out.println(msg);
                }

                String[] inputArray = this.scanner.nextLine().trim().split(" ");
                Ship ship = validateInput(inputArray, shipCounter);
                if (ship != null) {
                    boolean isAdded;
                    try {
                        isAdded = this.addShip(ship);
                        if (isAdded) {
                            shipCounter++;
                            printPlayField();
                        } else {
                            printErrors("toClose", ship.getType());
                            ship = null;
                        }
                    } catch (ArrayIndexOutOfBoundsException e) {
                        System.out.println("Error");
                        ship = null;
                    }


                }
                error = ship == null;
            }

            if (this.shipsAdded.size() == 5) {
                return true;
            }
            return false;
        }

        public void shoot() {
            int row;
            int col;

            System.out.println("The game starts!\n");
            this.printEnemyField();

            System.out.println("Take a shot!\n");
            while (true) {
                String coordinate = this.scanner.next();
                if (coordinate.length() == 2) {
                    if (getCoordinate(coordinate.charAt(0)) != -1) {
                        row = getCoordinate(coordinate.charAt(0));
                        try {
                            col = Integer.parseInt(coordinate.substring(1)) - 1;
                            if (row >= 0 && row <= 9 && col >= 0 && col <= 9) {
                                break;
                            }
                        } catch (NumberFormatException e) {
                            printErrors("wrongCoordinate", null);
                        }
                    } else {
                        printErrors("wrongCoordinate", null);
                    }

                } else {
                    printErrors("wrongCoordinate", null);
                }
            }

            boolean hit = this.hitShip(row, col);

            this.printEnemyField();
            System.out.println(hit ? "You hit a ship!" : "You missed!");
            this.printPlayField();


        }

        /********************************************************************************************************/

        private Ship validateInput(String[] strArray, int type) {

            Boolean horizontal = null;
            int[] firstCoordinate;
            int[] secondCoordinate;
            int first;
            int second;
            ShipTypes shipType = ShipTypes.findByType(type);

            if (strArray.length == 2 && shipType != null) {
                if (strArray[0].charAt(0) >= 65 && strArray[1].charAt(0) <= 74) { // Chars are right
                    char firstChar = strArray[0].charAt(0);
                    char secondChar = strArray[1].charAt(0);
                    try {
                        first = Integer.parseInt(strArray[0].substring(1)) - 1;
                        second = Integer.parseInt(strArray[1].substring(1)) - 1;
                    } catch (NumberFormatException e) {
                        return null;
                    }

                    firstCoordinate = new int[2];
                    firstCoordinate[0] = getCoordinate(firstChar);
                    firstCoordinate[1] = first;

                    secondCoordinate = new int[2];
                    secondCoordinate[0] = getCoordinate(secondChar);
                    secondCoordinate[1] = second;

                    if (firstChar == secondChar) {
                        horizontal = true;
                    } else if (first == second) {
                        horizontal = false;
                    } else {
                        printErrors("location", shipType);
                    }

                    if (horizontal != null) {
                        if (second - first == shipType.getCells() - 1 || secondChar - firstChar == shipType.getCells() - 1) {
                            return new Ship(firstCoordinate, secondCoordinate, horizontal, shipType);
                        } else if (first - second == shipType.getCells() - 1 || firstChar - secondChar == shipType.getCells() - 1) {
                            return new Ship(secondCoordinate, firstCoordinate, horizontal, shipType);
                        } else {
                            printErrors("length", shipType);
                        }
                    }
                }
            } else {
                printErrors("location", shipType);
            }

            return null;
        }

        private int getCoordinate(char x) {
            int count = 0;
            for (char i = 'A'; i <= 'J'; i++) {
                if (x == i) {
                    return count;
                }
                count++;
            }
            return -1;
        }

        private boolean hitShip(int row, int col) {
            if (this.playField[row][col] == 'O') {
                this.playField[row][col] = 'X';
                this.enemyField[row][col] = 'X';
                return true;
            }
            this.playField[row][col] = 'M';
            this.enemyField[row][col] = 'M';
            return false;
        }

        private char[][] fillPlayField() {
            char[][] battleField = new char[10][10];
            for (int i = 0; i < battleField.length; i++) {
                for (int j = 0; j < battleField[i].length; j++) {
                    battleField[i][j] = '~';
                }
            }
            return battleField;
        }

        private void printPlayField() {
            char letter = 'A';
            System.out.println("\n  1 2 3 4 5 6 7 8 9 10");
            for (int i = 0; i < playField.length; i++) {
                System.out.print(letter + " ");
                for (int j = 0; j < playField[i].length; j++) {
                    System.out.print(playField[i][j] + " ");
                }
                System.out.println();
                letter++;
            }
            System.out.println();
        }

        private void printEnemyField() {
            char letter = 'A';
            System.out.println("\n  1 2 3 4 5 6 7 8 9 10");
            for (int i = 0; i < enemyField.length; i++) {
                System.out.print(letter + " ");
                for (int j = 0; j < enemyField[i].length; j++) {
                    System.out.print(enemyField[i][j] + " ");
                }
                System.out.println();
                letter++;
            }
            System.out.println();
        }

        private void printErrors(String err, ShipTypes type) {
            switch (err) {
                case "length":
                    System.out.println("\nError! Wrong length of the " + type.getSlug() + "! Try again:\n");
                    break;
                case "location":
                    System.out.println("\nError! Wrong ship location! Try again:\n");
                    break;
                case "toClose":
                    System.out.println("\nError! You placed it too close to another one. Try again:\n");
                    break;
                case "wrongCoordinate":
                    System.out.println("\nError! You entered the wrong coordinates! Try again:\n");
            }
        }
    }
  learner_created: true
- name: src/battleship/Ship.java
  visible: true
  text: |
    package battleship;

    public class Ship {
        private int[] firstCoordinate;
        private int[] secondCoordinate;
        private boolean horizontal;
        private ShipTypes type;

        public Ship(int[] firstCoordinate, int[] secondCoordinate, boolean horizontal, ShipTypes type) {
            this.firstCoordinate = firstCoordinate;
            this.secondCoordinate = secondCoordinate;
            this.horizontal = horizontal;
            this.type = type;
        }

        public ShipTypes getType() {
            return type;
        }

        public int[] getFirstCoordinate() {
            return firstCoordinate;
        }

        public int[] getSecondCoordinate() {
            return secondCoordinate;
        }

        public boolean isHorizontal() {
            return horizontal;
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/125/stages/666/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Tue, 07 Sep 2021 06:21:02 UTC
record: 4
